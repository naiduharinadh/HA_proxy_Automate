<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Collection Form</title>

    <style>

/* CSS Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


.container {
    width: 100%;
    max-width: 600px; /* Adjust as needed */
    padding: 20px;
}

/* Your existing styles go here with adjustments as needed */
        body{
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            margin-left: 10%;
            min-height: 100vh;
        }

        div[name="lbdiv"] {
            background-color: lightblue;
            padding: 20px;
            margin-bottom: 10px;
            width: 700px;
            height: 275px;
            border-radius: 8px;
            margin-left: 55%;
            margin-right: auto;
            margin-bottom: 10px;
            margin-top: -53%; /* Adjusted margin-top */
        }

        div[name="wsoutput"] {
            background-color: lightblue;
            padding: 20px;
            margin-bottom: 10px;
            width: 700px;
            height: 275px;
            border-radius: 8px;
            margin-left: 55%;
            margin-right: auto;
            margin-bottom: 20px;
            margin-top: -53%;
        }
        div[name="loadBalancer"] {
            margin-top: 10px;
        }

        div[name="webserver"] {
            margin-bottom: 10px;
        }
        div[name="updateMessage"]{
            background-color: lightblue;
            padding: 20px;
	    overflow: auto;
            width: 700px;
            height: 420px;
            border-radius: 8px;
            margin-left: 55%;
            margin-top: -78%;
            margin-bottom: 0%;
        }
        div:hover[name="lbdiv"], div:hover[name="updateMessage"],div:hover[name="wsoutput"]{
            cursor: pointer;
            border: 3px solid black;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: background 3s ease; /* Added transition */
            background: linear-gradient(45deg, #fdaa12 ,#7ff3de , #33ff57, #4d25ff);
            background-size: 600% 100%;
            background-position: 100% 0;
            margin-bottom: 20px; /* Adjusted margin-bottom */
        }
        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 300px;
            transition: background 3s ease; /* Added transition */
            background: linear-gradient(45deg, #fe5e3a, #33ff57, #4d25ff);
            background-size: 600% 100%;
            background-position: 100% 0;
            margin-bottom: 20px; /* Adjusted margin-bottom */
        }

        form:hover {
            background-position: 0 0;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }

        input {
            width: calc(100% - 1px); /* Adjusted input width */
            padding: 8px;
	    margin-top: 0px;
            margin-bottom: 4px;
            box-sizing: border-box;
        }




	#variableInputs div {
	    margin-bottom: 0px; /* Add margin between input divs */
	}


	#variableInputs div input {	
	    width: calc(100% - 30px); /* Calculate width for input fields (accounting for label width and margin) */
	    padding: 8px;
/*	    box-sizing: border-box;*/
	    margin-right: -7px;
	    margin-top: -10px;
	   
	}

#variableInputs div button {
    margin-left: 7px;
    padding: 8px; /* Apply padding to buttons */
    box-sizing: border-box;
}




        button {
            background-color: #4caf50;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: calc(100% - 16px); /* Adjusted button width */
        }
	#variableInputs{
	    	height: 250px;
		overflow: auto;
	}
	
	.delete-btn {
    width: 30px; /* Set the width of the button */
    height: 30px; /* Set the height of the button */
    margin-top: 8px;
    margin-bottom: 10px;
    margin-left: 0px; /* Adjust the left margin to create space between the input field and the button */
    border: 0px solid black; /* Add a border to the button */
    background-image: url("https://cdn-icons-png.flaticon.com/128/3917/3917211.png");
    background-size: cover; /* Scale the background image to cover the button */
    background-repeat: no-repeat; /* Prevent the background image from repeating */
    background-color: white; 
    cursor: pointer; 
    border-radius: 50%;
    align-items: center;
  justify-content: center;
  }

    </style>
</head>
<body>
<div class="container" >
<form id="terraformForm" name="tfBox">
    <div id="tf" name="tf">
        <label for="cloudProvider">Select Cloud Provider:</label>
        <select id="cloudProvider" name="cloudProvider">
            <option value="aws">AWS</option>
            <option value="azure">Azure</option>
        </select>

        <select id="workenv" name="workenv">
            <option value="dev">DEVELOP</option>
            <option value="test">TEST</option>
            <option value="deploy">DEPLOYMENT</option>
        </select>
    </div>
    <div id="variableInputs">
        <div>
            <label for="variable1">Variable 1:</label>
            <input type="text" id="variable1" name="variables[]" />
        </div>
    </div>
    <button type="button" onclick="addInput()">Add Variable</button>
    <button type="button" id="executeTerraform" onclick="executeTerraform()"  >Execute Terraform</button>

</form>


<div id="updateMessage" name="updateMessage" > update message </div>




<!----- yes or no button div --------->

<div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <p>Do you want to start the process?</p>
            <button id="confirmBtn">Yes</button>
            <button id="cancelBtn">No</button>
        </div>
    </div>
 <style>
        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 120%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }
	#confirmBtn{
	margin-bottom: 30px;
	width: 150px;
	}
	#cancelBtn{
		margin-bottom: 30px;
	        width: 150px;
	}
	.modal-content{
	    background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 40%;
	    margin-left: 30%;
	    margin-top: 13%;
            transition: background 3s ease; /* Added transition */
            background: linear-gradient(45deg, #fe5e3a, #33ff57, #4d25ff);
            background-size: 600% 100%;
            background-position: 100% 0;
            margin-bottom: 20px; /* Adjusted margin-bottom */
        }

    	#executeTerraform{
		margin-top: 8px;
	}
       #cancelBtn{
                margin-bottom: 30px;
                width: 150px;
        }

        /* Close button */
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
	    margin-top: -10px;
	    margin-left: 10px;
        }
	
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>

<script>


/*
    function addInput() {
        var inputContainer = document.getElementById("variableInputs");
        var variableCount = inputContainer.children.length + 1; // +1 to create unique IDs
        var newInput = document.createElement("div");
        newInput.innerHTML = '<label for="variable' + variableCount + '">Variable ' + variableCount + ':</label>' +
            '<input type="text" id="variable' + variableCount + '" name="variables[]" />';
        inputContainer.appendChild(newInput);
    }

*/

function addInput() {
    var inputContainer = document.getElementById("variableInputs");
    var variableCount = inputContainer.children.length + 1; // +1 to create unique IDs
    var newInput = document.createElement("div");

    // Create input field
    var inputField = document.createElement("input");
    inputField.type = "text";
    inputField.id = "variable" + variableCount;
    inputField.name = "variables[]";

    // Create label for the input field
    var label = document.createElement("label");
    label.htmlFor = "variable" + variableCount;
    label.textContent = "Variable " + variableCount + ":";

    // Create delete button
    var deleteBtn = document.createElement("button");
//    deleteBtn.textContent = "Delete";
    deleteBtn.className = "delete-btn";

    // Append elements to the new div
    newInput.appendChild(label);
    newInput.appendChild(inputField);
    newInput.appendChild(deleteBtn);

    // Append the new div to the input container
    inputContainer.appendChild(newInput);
}

// Event delegation to handle click on delete buttons
document.getElementById('variableInputs').addEventListener('click', function(event) {
    if (event.target.classList.contains('delete-btn')) {
        // Remove the parent div containing the input field, label, and delete button
        event.target.parentElement.remove();
    }
});





    // Get the modal
        var modal = document.getElementById("myModal");

        // Get the button that opens the modal
        var btn = document.getElementById("executeTerraform");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal
        btn.onclick = function() {
            modal.style.display = "block";
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function() {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }


    document.getElementById('confirmBtn').addEventListener('click',function executeTerraform() {
        var formData = {
            cloudProvider: document.getElementById("cloudProvider").value,
            workenv: document.getElementById("workenv").value,
            variables: collectVariables()
        };
        // Convert formData to JSON
        var jsonData = JSON.stringify(formData);

        // Send jsonData to the server...
        // Example using XMLHttpRequest:
        var xhr = new XMLHttpRequest();
            xhr.open("POST", "http://<%=ip%>:2323/terraform", true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                   // console.log("Response:", xhr.responseText);
		    document.getElementById("updateMessage").innerHTML = this.responseText;
                    console.error("Error:", xhr.status);
                }
            }
        };
        xhr.send(jsonData);
	modal.style.display = "none";
    });

    function collectVariables() {
        var variables = [];
        var variableInputs = document.getElementsByName("variables[]");
        for (var i = 0; i < variableInputs.length; i++) {
            var variable = variableInputs[i].value;
            variables.push({ name: "variable" + (i + 1), value: variable });
        }
        return variables;
    }

    
    document.getElementById('cancelBtn').addEventListener('click', function() {
            // Close the modal
            modal.style.display = "none";
        });

</script>

<div id="loadBalancer" name="loadBalancer">
    <form id="dataForm" action="/collectdata" method="GET">
        <label for="name">IP of LoadBalancer:</label>
        <input type="text" id="lbip" name="lbip" required />

        <label for="name">Username</label>
        <input type="text" id="username" name="username" required />

        <label >password</label>
        <input type="password" id="password" name="password" required />

        <button type="button" onclick="createlb()">Submit</button>
    </form>


    <div id="lbdiv" name="lbdiv">this is  lbdiv</div>
</div>

<div id="webserver" name="webserver">
    <form id="workspace" action="/createws" method="GET">
        <label for="name">IP of WebServer:</label>
        <input type="text" id="websrvip" name="websrvip" required />

        <label for="name">Username</label>
        <input type="text" id="wsusername" name="wsusername" required />

        <label >password</label>
        <input type="password" id="wspassword" name="wspassword" required />

        <button type="button" onclick="createwebserver()">Submit</button>
    </form>
    <div id="wsoutput" name="wsoutput">out put for web servers  </div>
</div>

<form action="/upload" method="post" enctype="multipart/form-data">
    <label for="fileInput">Choose a file:</label>
    <input type="file" id="fileInput" name="fileInput" accept=".jpg, .jpeg, .png" />
    <button type="submit">Upload</button>
</form>







<script>


                // Establish WebSocket connection
        const socket = new WebSocket('ws://<%= ip %>:2323');

        // Event listener for WebSocket connection opened
        socket.onopen = function () {
            console.log('WebSocket connection established');
        };

        // Event listener for receiving messages from WebSocket server
        socket.onmessage = function (event) {
            // Display real-time updates received from server
            const updateMessage = event.data;
            document.getElementById("updateMessage").innerText = updateMessage;
        };

        // Event listener for WebSocket connection closed
        socket.onclose = function () {
            console.log('WebSocket connection closed');
        };





    function createlb() {
        let lbip = document.getElementById("lbip").value;
        let username = document.getElementById("username").value;
        let password = document.getElementById("password").value;
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4) {
                document.getElementById("lbdiv").innerHTML = this.responseText;
            }
        };
        xhttp.open("GET", "http://<%=ip%>:2323/collectdata?lbip=" + lbip + "&" + "username=" + username + "&" + "password=" + password, true);
        xhttp.send();
    }

    function createwebserver() {
        let websrvip = document.getElementById("websrvip").value;
        let wsusername = document.getElementById("wsusername").value;
        let wspassword = document.getElementById("wspassword").value;
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4) {
                document.getElementById("wsoutput").innerHTML = this.responseText;
            }
        };
        xhttp.open("GET", "http://<%=ip%>:2323/createws?websrvip=" + websrvip + "&" + "wsusername=" + wsusername + "&" + "wspassword=" + wspassword, true);
        xhttp.send();
    }
</script>
</div>
</body>
</html>
